The SIGWFast code is originally written by [Lukas T. Witkowski]. MIT License, Copyright (c) 2022 Lukas T. Witkowski
Modifications have been made by Ameek Malhotra. These include moving most of the SIGWFast routines apart from the kernel calculations to fortran and optionally using numba-scipy to accelerate the kernel calculations.

To build the SIGWfast Fortran Extension:

Prerequisites

- Fortran compiler (e.g., gfortran)
- GCC (the script uses gcc-14 by default; adjust if needed)
- NumPy (for f2py)
- OpenMP support (for parallelization)

Compilation Steps

1. Navigate to the directory containing the Fortran source files and compile_sigwfast.py:
   cd gwb/sigw_fast

2. Edit the script if needed:
   - If you do not have gcc-14, change the CC variable in compile_sigwfast.py to your available GCC version (e.g., gcc or gcc-13).

3. Run the compilation script:
   python compile_sigwfast.py

4. Check for success:
   - If compilation is successful, you will see:
     Compilation successful! You can now import sigwfast in Python.
   - If not, review the error messages and ensure all dependencies are installed.

Notes

- The script uses f2py to build the Python extension from the Fortran sources.
- The compiled module will be named sigwfast and can be imported in your Python code.
- If you encounter issues with OpenMP or compiler flags, consult your system documentation or modify the script accordingly.

To install numba-scipy on python>=3.12 see - https://github.com/numba/numba-scipy/issues/101.

Due to the complicated kernel calculations involved, running SIGWFast with w different from 1/3 is slow. To speed up the inference in this case there is an option to precompute the kernels over a grid of w on [0,1] and use the precomputed kernels in the inference loop. This can be done using the file create_cache_kernels.py with the desired precision settings for the SIGWFast integrator (nd) and w-grid spacing. If you do not wish to use the precomputed kernels, it is highly recommended to use the numba-scipy version of the kernels.  
